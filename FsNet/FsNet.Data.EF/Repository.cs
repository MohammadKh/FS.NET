#region  using System; using System.Collections.Generic; using System.Data.Entity; using System.Linq; using System.Linq.Expressions; using System.Threading; using System.Threading.Tasks; using FsNet.Data.Contracts.Infrastructure; using FsNet.Data.Contracts.Model; using FsNet.Data.Contracts.Repository; using LinqKit;  #endregion  namespace FsNet.Data.EF {     public class Repository<TEntity, TKey> : IRepository<TEntity, TKey> where TEntity : class, IEntity<TKey>     {         #region Private Fields          private readonly IDataContext _context;         private readonly DbSet<TEntity> _dbSet;         private readonly IUnitOfWork _unitOfWork;          #endregion Private Fields              public Repository(IDataContext context, IUnitOfWork unitOfWork)         {             _context = context;             _unitOfWork = unitOfWork;
            _dbSet = context.SetEntity<TEntity>();         }          public virtual TEntity Find(params object[] keyValues)         {             return _dbSet.Find(keyValues);         }          public virtual IQueryable<TEntity> SelectQuery(string query, params object[] parameters)         {             return _dbSet.SqlQuery(query, parameters).AsQueryable();         }          public virtual void Insert(TEntity entity)         {             _dbSet.Add(entity);         }          public virtual void InsertRange(IEnumerable<TEntity> entities)         {             foreach (var entity in entities)             {                 Insert(entity);             }         }          public virtual void AddRange(IEnumerable<TEntity> entities)         {             _dbSet.AddRange(entities);         }          public virtual void Update(TEntity entity)         {             _context.SetEntityEntry(entity).State = EntityState.Modified;
            _dbSet.Attach(entity);         }          public virtual void Delete(object id)         {             var entity = _dbSet.Find(id);
            if(entity != null) Delete(entity);         }          public virtual void Delete(TEntity entity)         {             _context.SetEntityEntry(entity).State = EntityState.Deleted;             _dbSet.Attach(entity);         }          public virtual async Task<bool> DeleteAsync(params object[] keyValues)         {             return await DeleteAsync(CancellationToken.None, keyValues);         }          public virtual async Task<bool> DeleteAsync(CancellationToken cancellationToken, params object[] keyValues)         {             var entity = await FindAsync(cancellationToken, keyValues);              if (entity == null)             {                 return false;             }             _context.SetEntityEntry(entity).State = EntityState.Deleted;             _dbSet.Attach(entity);              return true;         }          IQueryFluent<TEntity, TKey> IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, bool>> query)         {             return Query(query);         }          IQueryFluent<TEntity, TKey> IRepository<TEntity, TKey>.Query()         {             return Query();         }          public IQueryFluent<TEntity, TKey> Query()         {             return new QueryFluent<TEntity, TKey>(this);         }          public virtual IQueryFluent<TEntity, TKey> Query(IPredicateBinder<TEntity> predicateBinder)         {             return new QueryFluent<TEntity, TKey>(this, predicateBinder);         }          public virtual IQueryFluent<TEntity, TKey> Query(Expression<Func<TEntity, bool>> query)         {             return new QueryFluent<TEntity, TKey>(this, query);         }          public IQueryable<TEntity> Queryable()         {             return _dbSet;         }           public virtual async Task<TEntity> FindAsync(params object[] keyValues)         {             return await _dbSet.FindAsync(keyValues);         }          public virtual async Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)         {             return await _dbSet.FindAsync(cancellationToken, keyValues);         }

        internal IQueryable<TEntity> Select(             Expression<Func<TEntity, bool>> filter = null,             Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,             List<Expression<Func<TEntity, object>>> includes = null,             int? page = null,             int? pageSize = null)         {             IQueryable<TEntity> query = _dbSet;              if (includes != null)             {                 query = includes.Aggregate(query, (current, include) => current.Include(include));             }             if (orderBy != null)             {                 query = orderBy(query);             }             if (filter != null)             {                 query = query.AsExpandable().Where(filter);             }             if (page != null && pageSize != null)             {                 query = query.Skip((page.Value - 1)*pageSize.Value).Take(pageSize.Value);             }             return query;         }          internal async Task<IEnumerable<TEntity>> SelectAsync(             Expression<Func<TEntity, bool>> filter = null,             Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,             List<Expression<Func<TEntity, object>>> includes = null,             int? page = null,             int? pageSize = null)         {             return await Select(filter, orderBy, includes, page, pageSize).ToListAsync();         }          public virtual void InsertOrUpdate(TEntity entity)         {             _context.SetEntityEntry(entity).State = CheckIfNull(entity.Id) ? EntityState.Added :  EntityState.Modified;             _dbSet.Attach(entity);         }          private static bool CheckIfNull(TKey key)         {             if(null == key)                 return true;             if (key is long || key is int || key is short)                 return Convert.ToInt64(key) == 0;             if (key is float || key is double)                 return Math.Abs(Convert.ToDouble(key)) < .00000001;             if (key is byte)                 return Convert.ToByte(key) == 0x0;             if (key is Guid)                 return new Guid(key.ToString()) == Guid.Empty;             if(key is string)                 return string.IsNullOrWhiteSpace(key.ToString());             return false;         }
    } }